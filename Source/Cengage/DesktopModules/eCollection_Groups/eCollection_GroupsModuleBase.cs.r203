/*
' Copyright (c) 2012 DotNetNuke Corporation
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/

using System.Collections;
using DotNetNuke.Entities.Modules;
using System;
using System.Linq;
using System.Collections.Generic;
using DotNetNuke.Modules.eCollection_Groups.Components;
using DotNetNuke.Modules.eCollection_Groups.Components.Common;
using iTextSharp.text;
using iTextSharp.text.pdf;
namespace DotNetNuke.Modules.eCollection_Groups
{

    /// <summary>
    /// This base class can be used to define custom properties for multiple controls. 
    /// An example module, DNNSimpleArticle (http://dnnsimplearticle.codeplex.com) uses this for an ArticleId
    /// 
    /// Because the class inherits from PortalModuleBase, properties like ModuleId, TabId, UserId, and others, 
    /// are accessible to your module's controls (that inherity from eCollection_GroupsModuleBase
    /// 
    /// </summary>

    public class eCollection_GroupsModuleBase : DotNetNuke.Entities.Modules.PortalModuleBase
    {
        protected const string GroupsModule = "eCollection_Groups";
        protected const string SessionsModule = "eCollection_Sessions";
        protected const string SessionParameter = "createsession";
        protected const string Sessionprofile = "sessionprofile";
        protected const string StudentsModule = "eCollection_Students";
        protected const string Studentprofile = "profile";

        protected const string GROUPPROFILE = "groupprofile";
        protected const string CREATEGROUP = "creategroup";
        protected const string EDITGROUP = "editgroup";
        protected const string ADDSTUDENTTOCREATEGROUP = "addstudenttocreategroup";
        protected const string ADDSTUDENTTOEDITGROUP = "addstudenttoeditgroup";
        protected const string ADDTEACHERTOCREATEGROUP = "addteachertocreategroup";
        protected const string ADDTEACHERTOEDITGROUP = "addteachertoeditgroup";
        protected const string RECORDINGS = "recordings";
        protected const string LISTEN = "listen";

        protected const string CENGAGESTAGING = "cenagagestaging";

        private List<Components.Groups> _groups;
        private List<Components.Groups> _classes;
        private List<IDCollection> _students;
        private List<IDCollection> _teachers;
        private List<IDCollection> _deletedstudents = new List<IDCollection>();
        private List<IDCollection> _deletedteachers = new List<IDCollection>();

        GroupController _groupController = GroupController.Instance;

        public string LoginName = "Jagan@htcindia.com";
        public char GroupType = 'N';
        public char ClassType = 'C';

        protected int GetTabID(string ModuleName)
        {
            int modID = 0;
            DotNetNuke.Entities.Modules.ModuleController mc = new ModuleController();
            ArrayList existMods = mc.GetModulesByDefinition(this.PortalId, ModuleName);
            foreach (DotNetNuke.Entities.Modules.ModuleInfo mi in existMods)
            {
                if (!mi.IsDeleted)
                {
                    modID = mi.TabID;
                }
            }
            int iProfileTabId = Convert.ToInt32(modID);
            return iProfileTabId;
        }



        public List<Components.Groups> GroupLists
        {
            get
            {
                if (_groups == null)
                {
                    _groups = _groupController.GetGroupList(GroupType, LoginName);
                }

                return _groups;
            }
            set { _groups = value; }
        }
        public List<Components.Groups> ClassList
        {
            get
            {
                if (_classes == null)
                {
                    _classes = _groupController.GetClassList(ClassType, LoginName);
                }

                return _classes;
            }
            set { _classes = value; }
        }

        public List<IDCollection> StudentList
        {
            get
            {
                //if (_students == null)
                //{
                //    if (Session["studentList"] != null)
                //    {
                //        _students = Session["studentList"] as List<IDCollection>;
                //    }

                //}
                return _students;
            }
            set
            {
                _students = value;
                //Session["studentList"] = _students;
                //if (Session["studentList"] != null && _students != null)
                //{
                //    foreach (IDCollection studentCollection in _students)
                //    {
                //        (Session["studentList"] as List<IDCollection>).Add(studentCollection);
                //    }
                //    List<IDCollection> collection = Session["studentList"] as List<IDCollection>;
                //    collection = collection.GroupBy(x => x.Id).Select(y => y.First()).ToList<IDCollection>();
                //    Session["studentList"] = null;
                //    Session["studentList"] = collection;
                //}
                //else
                //{
                //    Session["studentList"] = _students;
                //}
            }
        }

        public List<IDCollection> TeachersList
        {
            get
            {
                //if (_teachers == null)
                //{
                //    if (Session["teacherList"] != null)
                //    {
                //        _teachers = Session["teacherList"] as List<IDCollection>;
                //    }

                //}
                return _teachers;
            }
            set
            {
                _teachers = value;
                //Session["teacherList"] = _teachers;
                //if (Session["teacherList"] != null && value != null)
                //{
                //    foreach (IDCollection teacherCollection in value)
                //    {
                //        (Session["teacherList"] as List<IDCollection>).Add(teacherCollection);
                //    }
                //    List<IDCollection> collection = Session["teacherList"] as List<IDCollection>;
                //    collection = collection.GroupBy(x => x.Id).Select(y => y.First()).ToList<IDCollection>();
                //    Session["teacherList"] = null;
                //    Session["teacherList"] = collection;
                //}
                //else
                //{
                //    Session["teacherList"] = value;
                //}
            }
        }
        public List<IDCollection> DeletedStudentList
        {
            get
            {
                //if (_deletedstudents.Count == 0)
                //{
                //    if (Session["deletedStudent"] != null)
                //    {
                //        _deletedstudents = Session["deletedStudent"] as List<IDCollection>;
                //    }

                //}
                return _deletedstudents;
            }
            set
            {
                _deletedstudents = value;
            //    if (Session["deletedStudent"] != null)
            //    {
            //        foreach (IDCollection deletedStudent in _deletedstudents)
            //        {
            //            (Session["deletedStudent"] as List<IDCollection>).Add(deletedStudent);
            //        }
            //    }
            //    else
            //    {
            //        Session["deletedStudent"] = _deletedstudents;
            //    }
            }
        }
        public List<IDCollection> DeletedTeachersList
        {
            get
            {
                //if (_deletedteachers.Count == 0)
                //{
                //    if (Session["deletedTeacher"] != null)
                //    {
                //        _deletedteachers = Session["deletedTeacher"] as List<IDCollection>;
                //    }

                //}
                return _deletedteachers;
            }
            set
            {
                _deletedteachers = value;
                //if (Session["deletedTeacher"] != null)
                //{
                //    foreach (IDCollection deletedTeacher in _deletedteachers)
                //    {
                //        (Session["deletedTeacher"] as List<IDCollection>).Add(deletedTeacher);
                //    }
                //}
                //else
                //{
                //    Session["deletedTeacher"] = _deletedteachers;
                //}
            }
        }
        public int RoleId
        {
            get
            {
                object value = Session["RoleId"];
                return value == null ? 0 : (int)value;
            }
            protected set { Session["RoldId"] = value; }
        }
        Rectangle page;
        protected void PrintStudentCard(int groupId)
        {
            string attachment = "inline; filename=StudentCard.pdf";

            Response.ClearContent();

            Response.AddHeader("content-disposition", attachment);

            Response.ContentType = "application/pdf";
            /*
             * step 1
             *
             * __ONLY__ if using version >= 5.0.6
             * see commented section directly below
             *
             */
            using (Document doc = new Document(PageSize.A4))
            {
                PdfPTable masterTable = new PdfPTable(4);
                masterTable.SetWidths(new float[] { 70f, 3f, 70f, 3f });
                page = doc.PageSize;
                masterTable.TotalWidth = 450f;
                masterTable.HorizontalAlignment = Element.ALIGN_CENTER;
                masterTable.LockedWidth = true;

                // step 2
                PdfWriter writer = PdfWriter.GetInstance(doc, Response.OutputStream);

                // step 3
                doc.Open();

                // step 4

                PdfPTable head = new PdfPTable(1);
                head.TotalWidth = page.Width;
                Phrase phrase = new Phrase(
                  DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss") + " GMT", new Font(Font.FontFamily.COURIER, 8)
                );
                PdfPCell c = new PdfPCell(phrase);
                c.Border = Rectangle.NO_BORDER;
                c.VerticalAlignment = Element.ALIGN_TOP;
                c.HorizontalAlignment = Element.ALIGN_CENTER;
                head.AddCell(c);
                iTextSharp.text.Image gif = iTextSharp.text.Image.GetInstance(
                  Request.MapPath("~/Portals/0/images/PM.png")
                );
                gif.Alignment = iTextSharp.text.Image.LEFT_ALIGN;
                gif.ScaleToFit(100f, 50f);
                int i = 0;
                PdfPCell horiemptyCell = new PdfPCell();
                PdfPCell empatcell = new PdfPCell();
                foreach (Components.Groups groups in GroupController.Instance.GetGroupNameByGroupId(groupId, "Student"))
                {
                    PdfPTable printcardTable = new PdfPTable(1);
                    printcardTable.SetWidths(new float[] { 6f });
                    printcardTable.TotalWidth = 200f;
                    printcardTable.HorizontalAlignment = Element.ALIGN_MIDDLE;
                    printcardTable.LockedWidth = true;
                    PdfPTable table = new PdfPTable(3);
                    table.SetWidths(new float[] { 5f, 6f, 2.5f });

                    table.TotalWidth = 200f;
                    table.HorizontalAlignment = Element.ALIGN_LEFT;
                    table.LockedWidth = true;

                    PdfPCell imgcell = new PdfPCell(gif, true);
                    imgcell.HorizontalAlignment = Element.ALIGN_LEFT;
                    imgcell.VerticalAlignment = Element.ALIGN_MIDDLE;
                    imgcell.Border = 0;
                    imgcell.FixedHeight = 30f;
                    imgcell.BorderWidthTop = 0f;
                    imgcell.BorderWidthBottom = 0f;
                    imgcell.BorderWidthLeft = 0f;
                    imgcell.BorderWidthRight = 0f;

                    table.AddCell(imgcell);
                    Font f = new Font();
                    f.Size = 5f;

                    PdfPCell cell2 = new PdfPCell(new Phrase("This card shows your                        PM eCollection username and      password. Keep it in a safe place.", f));
                    cell2.VerticalAlignment = Element.ALIGN_MIDDLE;
                    cell2.HorizontalAlignment = Element.ALIGN_MIDDLE;
                    //cell2.Border = 0;
                    cell2.BorderColor = new BaseColor(255, 0, 0);
                    cell2.BorderWidthRight = 0.8f;
                    cell2.BorderWidthTop = 0f;
                    cell2.BorderWidthBottom = 0f;
                    cell2.BorderWidthLeft = 0f;
                    table.AddCell(cell2);

                    PdfPCell cell3 = new PdfPCell(new Phrase("Available on itunes App Store", f));
                    cell3.VerticalAlignment = Element.ALIGN_MIDDLE;
                    cell3.PaddingLeft = 8f;
                    cell3.Border = Rectangle.NO_BORDER;
                    table.AddCell(cell3);

                    empatcell.Border = Rectangle.NO_BORDER;
                    horiemptyCell.FixedHeight = 10f;
                    horiemptyCell.Border = Rectangle.NO_BORDER;

                    PdfPCell header = new PdfPCell(table);
                    header.PaddingTop = 5f;
                    header.Border = 0;
                    Font f2 = new Font();
                    f2.Size = 10f;

                    printcardTable.AddCell(header);
                    printcardTable.AddCell(empatcell);
                    Phrase UserName = new Phrase();
                    PdfPCell innertextcell = new PdfPCell(UserName);
                    innertextcell.VerticalAlignment = Rectangle.ALIGN_LEFT;
                    innertextcell.HorizontalAlignment = Rectangle.ALIGN_MIDDLE;
                    innertextcell.PaddingTop = 8f;
                    innertextcell.PaddingLeft = -0.5f;
                    PdfPCell second = new PdfPCell(innertextcell);
                    second.BorderColor = new BaseColor(255, 0, 0);
                    second.BorderWidthTop = 0.8f;
                    second.BorderWidthBottom = 0.8f;
                    second.BorderWidthLeft = 0f;
                    second.BorderWidthRight = 0f;
                    second.FixedHeight = 25f;
                    Font f3 = new Font();
                    f3.Size = 7f;
                    printcardTable.AddCell(second);
                    Phrase date = new Phrase();
                    PdfPCell thirdCell = new PdfPCell(date);
                    thirdCell.Border = Rectangle.NO_BORDER;
                    thirdCell.PaddingTop = 8f;
                    thirdCell.PaddingLeft = 5f;
                    Font f4 = new Font();
                    f4.Size = 8f;
                    Font red = new Font();
                    red.Size = 8f;
                    red.Color = BaseColor.RED;


                    Phrase ph1 = new Phrase();


                    PdfPCell fourthCell = new PdfPCell(ph1);
                    fourthCell.Border = Rectangle.NO_BORDER;
                    fourthCell.PaddingTop = 8f;
                    fourthCell.PaddingLeft = 5f;


                    Phrase ph2 = new Phrase();


                    PdfPCell fifthCell = new PdfPCell(ph2);
                    fifthCell.Border = Rectangle.NO_BORDER;
                    fifthCell.PaddingTop = 8f;
                    fifthCell.PaddingLeft = 5f;


                    Phrase ph3 = new Phrase();

                    Chunk c7 = new Chunk("Date Set: ", red);
                    date.Add(c7);

                    Chunk c1 = new Chunk("UserName: ", red);
                    ph1.Add(c1);

                    Chunk c3 = new Chunk("Password: ", red);
                    ph2.Add(c3);

                    Chunk c5 = new Chunk("Email: ", red);
                    ph3.Add(c5);

                    PdfPCell sixthCell = new PdfPCell(ph3);
                    sixthCell.Border = Rectangle.NO_BORDER;
                    sixthCell.PaddingTop = 8f;
                    sixthCell.PaddingLeft = 5f;
                    sixthCell.PaddingBottom = 5f;
                    printcardTable.AddCell(thirdCell);
                    printcardTable.AddCell(fourthCell);
                    printcardTable.AddCell(fifthCell);
                    printcardTable.AddCell(sixthCell);
                    date.Add(new Chunk("12/12/12 ", f4));


                    Chunk c2 = new Chunk(groups.StudentNames, f4);
                    ph1.Add(c2);
                    UserName.Add(c2);


                    Chunk c4 = new Chunk(groups.PassWord, f4);
                    ph2.Add(c4);


                    Chunk c6 = new Chunk(groups.EmailAddress, f4);
                    ph3.Add(c6);

                    PdfPCell column1 = new PdfPCell(printcardTable);
                    if (i % 2 == 0 & i != 0)
                    {
                        masterTable.AddCell(horiemptyCell);
                        masterTable.AddCell(empatcell);
                        masterTable.AddCell(horiemptyCell);
                        masterTable.AddCell(empatcell);
                    }
                    masterTable.AddCell(column1);
                    masterTable.AddCell(empatcell);
                    i++;

                }
                if (i % 2 == 1)
                {
                    masterTable.AddCell(horiemptyCell);
                    masterTable.AddCell(empatcell);
                    masterTable.AddCell(horiemptyCell);
                    masterTable.AddCell(empatcell);
                }
                doc.Add(masterTable);

                /* step 5  */
                if (masterTable.Rows.Count > 0)
                {
                    doc.Close();
                    Response.Write(doc);
                }

                Response.End();
            }
        }

    }
}
