using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using DotNetNuke.Common;
using DotNetNuke.Entities.Portals;
using DotNetNuke.Modules.eCollection_Groups.Components;
using DotNetNuke.Modules.eCollection_Groups.Components.Common;

namespace DotNetNuke.Modules.eCollection_Groups.Groups
{
    public partial class CreateGroup : eCollection_GroupsModuleBase
    {
        protected void Page_Load(object sender, EventArgs e)
        {                     
            if (!IsPostBack)
            {
                SubscriptionDrpList.DataSource = GroupController.Instance.GetSubscription(LoginName);
                SubscriptionDrpList.DataBind();
                HttpCookie cookie = HttpContext.Current.Request.Cookies["SelectedGroupId"];
                //if (cookie != null)
                //{
                    //int selectedGroupId = int.Parse(cookie.Value);
                    //GroupController groupcontroller = GroupController.Instance;
                    //TeachersList = groupcontroller.GetMembersByGroup(selectedGroupId, "Teacher");
                    //StudentList = groupcontroller.GetMembersByGroup(selectedGroupId, "Student");
                    if (TeachersList != null && TeachersList.Count != 0)
                    {
                        CreateGroupContentDiv.Style.Add("display", "block");
                        TeacherDetailsRepeater.DataSource = TeachersList;
                        TeacherDetailsRepeater.DataBind();
                    }
                    else
                    {
                        TeacherDetailsDiv.Style.Add("display", "none");
                    }

                    if (StudentList != null && StudentList.Count != 0)
                    {
                        CreateGroupContentDiv.Style.Add("display", "block");
                        StudentDetailsRepeater.DataSource = StudentList;
                        StudentDetailsRepeater.DataBind();
                    }
                    else
                    {
                        StudentDetailsDiv.Style.Add("display", "none");
                    }
                //}
            }
            Messages.ClearMessages();
        }
        protected void CancelCreateGroup_Click(object sender, EventArgs e)
        {

          Response.Redirect(Globals.NavigateURL(PortalSettings.Current.ActiveTab.TabID));
        }

        protected void AddStudentButton_Click(object sender, EventArgs e)
        {
            List<IDCollection> SelectedstudentID = new List<IDCollection>();
            RepeaterItemCollection myItemCollection;
            myItemCollection = StudentDetailsRepeater.Items;
            for (int Stindex = 0; Stindex < myItemCollection.Count; Stindex++)
            {
                IDCollection studentIDCollection = new IDCollection();
                studentIDCollection.Id = (int.Parse((myItemCollection[Stindex].Controls[1] as Literal).Text));
                SelectedstudentID.Add(studentIDCollection);
            }
            HttpContext.Current.Response.Cookies["SubscriptionId"].Value = "ECOLL-100";//SubscriptionDrpList.SelectedItem.Text;
            StudentList = SelectedstudentID;
            Response.Redirect(Globals.NavigateURL(PortalSettings.Current.ActiveTab.TabID) + "?pagename=" + ADDSTUDENTTOCREATEGROUP);
        }

        protected void AddTeachersButton_Click(object sender, EventArgs e)
        {
            List<IDCollection> SelectedTeacherID = new List<IDCollection>();
            RepeaterItemCollection myItemCollection;
            myItemCollection = TeacherDetailsRepeater.Items;
            for (int Teindex = 0; Teindex < myItemCollection.Count; Teindex++)
            {
                IDCollection teacherIDCollection = new IDCollection();
                teacherIDCollection.Id = (int.Parse((myItemCollection[Teindex].Controls[1] as Literal).Text));
                SelectedTeacherID.Add(teacherIDCollection);
            }
            HttpContext.Current.Response.Cookies["SubscriptionId"].Value = "ECOLL-100";//SubscriptionDrpList.SelectedItem.Text;
            TeachersList = SelectedTeacherID;
            Response.Redirect(Globals.NavigateURL(PortalSettings.Current.ActiveTab.TabID) + "?pagename=" + ADDTEACHERTOCREATEGROUP);
        }
        protected void TeacherDeleteImgButton__Click(object sender, EventArgs e)
        {

            //Get the reference of the clicked button.
            Button button = (sender as Button);

            //Get the Repeater Item reference
            RepeaterItem item = button.NamingContainer as RepeaterItem;
            int teacherID = int.Parse((item.FindControl("teacherid") as Literal).Text);
            List<IDCollection> deletedTeacherList = new List<IDCollection>();
            foreach (IDCollection teacherCollection in Session["teacherList"] as List<IDCollection>)
            {
                if (teacherID == teacherCollection.Id)
                {
                    (Session["teacherList"] as List<IDCollection>).Remove(teacherCollection);
                    break;
                }
            }
            TeacherDetailsRepeater.DataSource = Session["teacherList"] as List<IDCollection>;
            TeacherDetailsRepeater.DataBind();
            TeacherDetailsUpdatePanel.Update();
        }

        protected void StudentDeleteImgButton__Click(object sender, EventArgs e)
        {
            //Get the reference of the clicked button.
            Button button = (sender as Button);

            //Get the Repeater Item reference
            RepeaterItem item = button.NamingContainer as RepeaterItem;
            int studentID = int.Parse((item.FindControl("studentid") as Literal).Text);
            List<IDCollection> deletedStudentList = new List<IDCollection>();
            foreach (IDCollection studentcollection in Session["studentList"] as List<IDCollection>)
            {
                if (studentID == studentcollection.Id)
                {
                    (Session["studentList"] as List<IDCollection>).Remove(studentcollection);
                    IDCollection studentIDCollection = new IDCollection();
                    studentIDCollection.Id = studentcollection.Id;
                    studentIDCollection.Text = "D";
                    deletedStudentList.Add(studentIDCollection);
                    break;
                }
            }
            DeletedStudentList = deletedStudentList;
            StudentDetailsRepeater.DataSource = Session["studentList"] as List<IDCollection>;
            StudentDetailsRepeater.DataBind();
            StudentDetailsUpdatePanel.Update();
        }
        protected void CreateGroupButton_Click(object sender, EventArgs e)
        {
            Components.Groups groups = new Components.Groups();
            groups.CreatedByUserId = 5;
            groups.CustomerSubId = int.Parse(SubscriptionDrpList.SelectedValue);
            groups.Name = GroupNameTextBox.Text;
            if (ClassCheckBox.Checked)
            {
                groups.GroupType = 'C';//char.Parse(MyEnums.GroupType.Class.ToString());
            }
            else
            {
                groups.GroupType = 'N';//char.Parse(MyEnums.GroupType.Group.ToString());
            }
            groups.CreatedOnDate = DateTime.Now;
            groups.ActiveFlag = 'Y';//char.Parse(MyEnums.Active.Yes.ToString());
            groups.UserCreated = "ADMIN";
            groups.DateCreated = DateTime.Now;
            if (!GroupController.Instance.ValidateGroupName(GroupNameTextBox.Text.Trim(), groups.GroupType, int.Parse(SubscriptionDrpList.SelectedValue)))
            {
                List<IDCollection> SelectedstudentID = new List<IDCollection>();

                RepeaterItemCollection myItemCollection;
                myItemCollection = StudentDetailsRepeater.Items;
                for (int Stindex = 0; Stindex < myItemCollection.Count; Stindex++)
                {
                    IDCollection studentIDCollection = new IDCollection();
                    studentIDCollection.Id = (int.Parse((myItemCollection[Stindex].Controls[1] as Literal).Text));
                    SelectedstudentID.Add(studentIDCollection);
                }
                List<IDCollection> SelectedTeacherID = new List<IDCollection>();
                myItemCollection = TeacherDetailsRepeater.Items;
                for (int Teindex = 0; Teindex < myItemCollection.Count; Teindex++)
                {
                    IDCollection teacherIDCollection = new IDCollection();
                    teacherIDCollection.Id = (int.Parse((myItemCollection[Teindex].Controls[1] as Literal).Text));
                    SelectedTeacherID.Add(teacherIDCollection);
                }

                groups.TeachersList = SelectedTeacherID;

                groups.StudentList = SelectedstudentID;

                Components.GroupController Gc = GroupController.Instance;
                int succesfull = int.Parse(Gc.Add(groups).ToString());
                //Session["studentList"] = null;
                StudentList = null;
                //Session["teacherList"] = null;
                TeachersList = null;
                //Session["deletedStudent"] = null;
                //DeletedStudentList = null;
                //Session["deletedTeacher"] = null;
                Response.Redirect(Globals.NavigateURL(PortalSettings.Current.ActiveTab.TabID));
            }
            else
            {
                Messages.ShowWarning("Group name already exists. Please specify a unique group name");
                GroupNameTextBox.Text = string.Empty;
            }
            
        }

        protected void Backtocreategroupbtn_Click(object sender, EventArgs e)
        {
            ////Session["studentList"] = null;
            //StudentList = null;
            ////Session["teacherList"] = null;
            //TeachersList = null;
            ////Session["deletedStudent"] = null;
            ////DeletedStudentList = null;
            ////Session["deletedTeacher"] = null;
            ////DeletedTeachersList = null;
                Response.Redirect(Globals.NavigateURL(PortalSettings.Current.ActiveTab.TabID));
        }

        protected void GroupNameTextBox_TextChanged(object sender, EventArgs e)
        {
            char groupType;
            if (ClassCheckBox.Checked)
            {
                groupType = 'C';//char.Parse(MyEnums.GroupType.Class.ToString());
            }
            else
            {
                groupType = 'N';//char.Parse(MyEnums.GroupType.Group.ToString());
            }
            if (GroupController.Instance.ValidateGroupName(GroupNameTextBox.Text.Trim(), groupType, int.Parse(SubscriptionDrpList.SelectedValue)))
            {
                Messages.ShowWarning("Group name already exists. Please specify a unique group name");
                GroupNameTextBox.Text = string.Empty;
            }
        }
    }
}