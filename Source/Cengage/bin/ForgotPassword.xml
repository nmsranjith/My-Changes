<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ForgotPassword</name>
    </assembly>
    <members>
        <member name="T:Cengage.Ecommerce.ForgotPassword.Settings">
            -----------------------------------------------------------------------------
            <summary>
            The Settings class manages Module Settings
            
            Typically your settings control would be used to manage settings for your module.
            There are two types of settings, ModuleSettings, and TabModuleSettings.
            
            ModuleSettings apply to all "copies" of a module on a site, no matter which page the module is on. 
            
            TabModuleSettings apply only to the current module on the current page, if you copy that module to
            another page the settings are not transferred.
            
            If you happen to save both TabModuleSettings and ModuleSettings, TabModuleSettings overrides ModuleSettings.
            
            Below we have some examples of how to access these settings but you will need to uncomment to use.
            
            Because the control inherits from ForgotPasswordSettingsBase you have access to any custom properties
            defined there, as well as properties from DNN such as PortalId, ModuleId, TabId, UserId and many more.
            </summary>
            -----------------------------------------------------------------------------
            <summary>
            Settings class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="T:Cengage.Ecommerce.ForgotPassword.ForgotPasswordSettingsBase">
            <summary>
            This base class can be used to define custom properties for multiple controls. 
            An example module, DNNSimpleArticle (http://dnnsimplearticle.codeplex.com) uses this for an ArticleId
            
            Because the class inherits from SettingsModuleBase, properties like ModuleId, TabId, UserId, and others, 
            are accessible to your module's controls (that inherity from ForgotPasswordSettingsBase
            
            </summary>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Settings.LoadSettings">
            -----------------------------------------------------------------------------
            <summary>
            LoadSettings loads the settings from the Database and displays them
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Settings.UpdateSettings">
            -----------------------------------------------------------------------------
            <summary>
            UpdateSettings saves the modified settings to the Database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:Cengage.Ecommerce.ForgotPassword.Edit">
            -----------------------------------------------------------------------------
            <summary>
            The EditForgotPassword class is used to manage content
            
            Typically your edit control would be used to create new content, or edit existing content within your module.
            The ControlKey for this control is "Edit", and is defined in the manifest (.dnn) file.
            
            Because the control inherits from ForgotPasswordModuleBase you have access to any custom properties
            defined there, as well as properties from DNN such as PortalId, ModuleId, TabId, UserId and many more.
            
            </summary>
            -----------------------------------------------------------------------------
            <summary>
            EditForgotPassword class.
            </summary>
            <remarks>
            Auto-generated class.
            </remarks>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Edit.Page_Load(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:Cengage.Ecommerce.ForgotPassword.View">
            -----------------------------------------------------------------------------
            <summary>
            The View class displays the content
            
            Typically your view control would be used to display content or functionality in your module.
            
            View may be the only control you have in your project depending on the complexity of your module
            
            Because the control inherits from ForgotPasswordModuleBase you have access to any custom properties
            defined there, as well as properties from DNN such as PortalId, ModuleId, TabId, UserId and many more.
            
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.ForgetPasswordPlaceHolder">
            <summary>
            ForgetPasswordPlaceHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.Forgot2">
            <summary>
            Forgot2 control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.EmailTextBox">
            <summary>
            EmailTextBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.divEmail">
            <summary>
            divEmail control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.EmailButton">
            <summary>
            EmailButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.ResetPlaceHolder">
            <summary>
            ResetPlaceHolder control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.NameLabel">
            <summary>
            NameLabel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.RegisteredMailID">
            <summary>
            RegisteredMailID control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.SecurityQuestionLabel">
            <summary>
            SecurityQuestionLabel control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.AnswerTextBox">
            <summary>
            AnswerTextBox control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.EmailSendButton">
            <summary>
            EmailSendButton control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.fpMsg">
            <summary>
            fpMsg control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.SecurityQuesAnswerHiddenField">
            <summary>
            SecurityQuesAnswerHiddenField control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.View.RefreshHiddenField">
            <summary>
            RefreshHiddenField control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.View.Page_Load(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.View.EmailButton_Click(System.Object,System.EventArgs)">
            <summary>
            To Validate Email in Ecommerce(UM) Database
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.View.encrypt(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Cengage.Ecommerce.ForgotPassword.Data.SqlDataProvider">
            -----------------------------------------------------------------------------
            <summary>
            SQL Server implementation of the abstract DataProvider class
            
            This concreted data provider class provides the implementation of the abstract methods 
            from data dataprovider.cs
            
            In most cases you will only modify the Public methods region below.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:Cengage.Ecommerce.ForgotPassword.Data.DataProvider">
            -----------------------------------------------------------------------------
            <summary>
            An abstract class for the data access layer
            
            The abstract data provider provides the methods that a control data provider (sqldataprovider)
            must implement. You'll find two commented out examples in the Abstract methods region below.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Data.DataProvider.VerifyUser(System.String)">
            <summary>
            To Validate Email in Ecommerce(UM) Database
            </summary>
            <param name="emailID"></param>
            <returns></returns>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Data.DataProvider.UpdateUserPassword(System.String,System.String)">
            <summary>
            To Update New Password in Ecommerce and DNN DataBase
            </summary>
            <param name="UserID"></param>
            <param name="NewPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Data.SqlDataProvider.VerifyUser(System.String)">
            <summary>
            To Validate Email in Ecommerce(UM) Database
            </summary>
            <param name="emailID"></param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Data.SqlDataProvider.UpdateUserPassword(System.String,System.String)">
            <summary>
            Update the password for User
            </summary>
            <param name="UserID"></param>
            <param name="NewPassword"></param>
            <returns>if update returns > 0 or return 0 as interger</returns>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.Data.SqlDataProvider.GetDomainOfUser(System.String)">
            <summary>
            Get Domain of User
            </summary>
            <param name="UserId"></param>
            <returns>Domain Name as string</returns>
        </member>
        <member name="T:Cengage.Ecommerce.ForgotPassword.Components.FeatureController">
            -----------------------------------------------------------------------------
            <summary>
            The Controller class for ForgotPassword
            
            The FeatureController class is defined as the BusinessController in the manifest file (.dnn)
            DotNetNuke will poll this class to find out which Interfaces the class implements. 
            
            The IPortable interface is used to import/export content from a DNN module
            
            The ISearchable interface is used by DNN to index the content of a module
            
            The IUpgradeable interface allows module developers to execute code during the upgrade 
            process for a module.
            
            Below you will find stubbed out implementations of each, uncomment and populate with your own data
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.resetPwdDiv">
            <summary>
            resetPwdDiv control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.NewPassword">
            <summary>
            NewPassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.RetypePassword">
            <summary>
            RetypePassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.divEmail">
            <summary>
            divEmail control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.UpdatePassword">
            <summary>
            UpdatePassword control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.linkExpiredDiv">
            <summary>
            linkExpiredDiv control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.linkUsedDiv">
            <summary>
            linkUsedDiv control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="F:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.archcncl">
            <summary>
            archcncl control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="M:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.UpdateDNNUserPassword(System.String)">
            <summary>
            For Authentication Purpose need to update the password in DNN DB.
            </summary>
            <param name="newPassword"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cengage.Ecommerce.ForgotPassword.ResetPassword.ResetPassword.Decrypt(System.String)" -->
        <member name="M:Cengage.Ecommerce.ForgotPassword.Components.ForgotPasswordController.VerifyUser(System.String)">
            <summary>
            To Validate Email in Ecommerce(UM) Database
            </summary>
            <param name="emailID"></param>
            <returns></returns>
        </member>
    </members>
</doc>
